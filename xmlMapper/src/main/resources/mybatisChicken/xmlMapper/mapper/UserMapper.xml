<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mybatisChicken.xmlMapper.mapper.UserMapper">

    <!--需要注意的是<mapper>根标签的 namespace属性。当Mapper接口和XML文件关联的时候,
    命名空间 namespace的值就需要配置成接口的全限定名称,例如 UserMapper接口对应的com.mybatisChicken.mapper.UserMapper
    , MyBatis内部就是通过这个值将接口和XML关联起来的-->



    <!--XML 中的select 标签的id 属性值和定义的接口方法名是一样的。MyBatis
    就是通过这种方式将接口方法和XML 中定义的SQL 语句关联到一起的，如果接口方法没有和
    XML 中的id 属性值相对应，启动程序便会报错-->
    <select id="selectById" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>



    <select id="selectAll" resultType="mybatisChicken.xmlMapper.model.SysUser">
	    select id,
	    	user_name userName,
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
	</select>

    <!--resultMap ：用于设置返回值的类型和映射关系。
        type ：必填，用于配置查询列所映射到的Java 对象类型。
        extends :选填，可以配置当前的resultMap 继承自其他的re sultMap ，属性值为继承resultMap 的id 。
        autoMapping ：选填，可选值为true 或false ，用于配置是否启用非映射字段（没有在resultMap 中配置的字段〉的自动映射功能， 该配置可以覆盖全局的
                        autoMappingBehavior 配置。

         resultMap 包含的所有标签如下。
            id ： 一个id 结果，标记结果作为id （唯一值），可以帮助提高整体性能。id 代表的是主键（或唯一值）的字段（可以有多个）
            result ： 注入到Java 对象属性的普通结果。
            association ： 一个复杂的类型关联，许多结果将包成这种类型。
            collection ： 复杂类型的集合。
            discriminator ：根据结果值来决定使用哪个结果映射。
            case ： 基于某些值的结果映射。
        -->
    <resultMap id="userMap" type="mybatisChicken.xmlMapper.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--
    映射XML 和接口的命名需要符合如下规则
    1，当只使用XML 而不使用接口的时候， namespace 的值可以设置为任意不重复的名称。
    2，标签的id 属性值在任何时候都不能出现英文句号“．”，并且同一个命名空间下不能出现重复的id 。
    3，因为接口方法是可以重载的，所以接口中可以出现多个同名但参数不同的方法，但是
        XML 中id 的值不能重复，因而接口中的所有同名方法会对应着XML 中的同一个id
        的方法。
    -->

    <insert id="insert">
		insert into sys_user(
			user_name, user_password, user_email,
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=DATE})
	</insert>
<!-- #{createTime, jdbcType=TIMESTAMP}  : 插入的create_time 的格式是 2019-05-08 23:41:51.602(Timestamp)
      #{createTime, jdbcType=Date}  : 插入的create_time 的格式是 2019-05-08(Date)
-->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
        user_name, user_password, user_email,
        user_info, head_img, create_time)
        values(
        #{userName}, #{userPassword}, #{userEmail},
        #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>

	<insert id="insert3">
		insert into sys_user(
		user_name, user_password, user_email,
		user_info, head_img, create_time)
		values(
		#{userName}, #{userPassword}, #{userEmail},
		#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

    <!-- Oracle 的例子，查询多个列的时候需要 keyColumn -->
    <insert id="insertOracle">
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="BEFORE">
            SELECT SEQ_USER.nextval from dual
        </selectKey>
        insert into sys_user(
        id, user_name, user_password, user_email,
        user_info, head_img, create_time)
        values(
        #{id}, #{userName}, #{userPassword}, #{userEmail},
        #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>


	<update id="updateById">
		update sys_user
		set user_name = #{userName},
			user_password = #{userPassword},
			user_email = #{userEmail},
			user_info = #{userInfo},
			head_img = #{headImg, jdbcType=BLOB},
			create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = #{id}
	</update>

	<delete id="deleteById">/*参数是id或实体的重载方法都能调用*/
		delete from sys_user where id = #{id}
	</delete>

	<!--多列主键，className，stuno 共同作为主键。stuno自增长。-->
	<insert id="insertStudent" useGeneratedKeys="true" keyProperty="stuno">
       insert into student(classname)
        values(
        #{className})
    </insert>


	<select id="selectMapBiggerCol" resultMap="userMap">
		select id from sys_user where id = #{id}
	</select>

	<select id="selectColBiggerMap" resultMap="userMapidname">
		select * from sys_user where id = #{id}
	</select>
	<resultMap id="userMapidname" type="mybatisChicken.xmlMapper.model.SysUser">
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
	</resultMap>


	<!--由于存储过程方式不支持MyBatis 的二级缓存 ，因此
   为了避免缓存配置出错，直接将select 标签的useCache 属性设置为false 。-->
	<select id="selectUserById" statementType="CALLABLE" useCache="false">
	    {call select_user_by_id(
	    	#{id, mode=IN},
	    	#{userName, mode=OUT, jdbcType=VARCHAR},
	    	#{userPassword, mode=OUT, jdbcType=VARCHAR},
	    	#{userEmail, mode=OUT, jdbcType=VARCHAR},
	    	#{userInfo, mode=OUT, jdbcType=VARCHAR},
	    	#{headImg, mode=OUT, jdbcType=BLOB, javaType=_byte[]},
	    	#{createTime, mode=OUT, jdbcType=TIMESTAMP}
	    )}
	</select>

	<!--因为调用存储过程返回查询结果集， select 标签需设置resultMap，将结果映射到List<SysUser>
  该方法还通过 total 出参得到了查询的总数-->
	<select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
	    {call select_user_page(
	    	#{userName, mode=IN},
	    	#{offset, mode=IN},
	    	#{limit, mode=IN},
	    	#{total, mode=OUT, jdbcType=BIGINT}
	    )}
	</select>
</mapper>


